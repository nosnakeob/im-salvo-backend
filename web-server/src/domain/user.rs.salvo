use serde::{Deserialize, Serialize};
use rbatis::crud;
use utoipa::ToSchema;
use web_common::rbatis::rb;

/// 用户模型
#[crud_table(table_name: "user")]
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct User {
    /// 用户ID
    pub id: Option<i64>,
    /// 用户名
    pub username: String,
    /// 密码
    pub password: String,
}

impl User {
    /// 根据用户名查询用户
    pub async fn select_by_name(name: &str) -> rbatis::Result<Option<Self>> {
        let rb = rb();
        rb.query_decode(
            "select * from user where username = ?",
            vec![rbs::to_value!(name)],
        )
        .await
    }

    /// 插入用户
    pub async fn insert(user: &User) -> rbatis::Result<Option<i64>> {
        let rb = rb();
        let id = web_common::insert_return_id!(rb, "user", user);
        Ok(id)
    }
}