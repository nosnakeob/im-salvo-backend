name: Salvo CI with Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    name: Test with Docker
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 启动依赖服务 (数据库和缓存)
      # --wait 标志会使用 docker-compose.yml 中的 healthcheck
      # 它会等待所有服务都健康后，再继续下一步
      - name: Start services
        run: docker-compose up -d --wait

      # 步骤 3: 设置 Rust 环境并缓存依赖
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo.git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      # 步骤 4: 运行测试
      # 关键：在这里设置 DATABASE_URL 环境变量，让测试代码能连接到数据库
      - name: Run tests
        run: cargo test -p web-server --verbose
#        env:
#          # 这个 URL 必须与 docker-compose.yml 中的配置相匹配
#          # 主机是 localhost，因为我们已经将端口映射到了 Runner
#          DATABASE_URL: "postgres://user:password@localhost:5432/mydatabase_test"
#          # 如果你的应用需要，可以设置其他环境变量
#          RUST_LOG: "info"

      # 步骤 5: 清理服务（可选但推荐）
      # 无论测试成功与否，这个步骤都会运行，以确保关闭 Docker 容器
      - name: Stop services
        if: always()
        run: docker-compose down
