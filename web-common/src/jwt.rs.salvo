use jsonwebtoken::{encode, decode, Header, Validation, EncodingKey, DecodingKey};
use serde::{Deserialize, Serialize};
use std::time::{SystemTime, UNIX_EPOCH};
use anyhow::Result;

use crate::core::utils::config::Config;

/// JWT用户声明
#[derive(Debug, Serialize, Deserialize)]
pub struct UserClaim {
    /// 签发时间
    pub iat: u64,
    /// 过期时间
    pub exp: u64,
}

impl UserClaim {
    /// 创建新的用户声明
    pub fn new() -> Self {
        let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();
        Self {
            iat: now,
            exp: now + 60 * 60 * 24 * 30, // 30天过期
        }
    }

    /// 签名JWT
    pub fn sign(claims: UserClaim) -> String {
        let secret_key = Config::SECRET_KEY.unwrap_or("secret");
        encode(
            &Header::default(),
            &claims,
            &EncodingKey::from_secret(secret_key.as_bytes()),
        )
        .unwrap()
    }

    /// 验证JWT
    pub fn verify(token: &str) -> Result<Self> {
        let secret_key = Config::SECRET_KEY.unwrap_or("secret");
        let token_data = decode::<UserClaim>(
            token,
            &DecodingKey::from_secret(secret_key.as_bytes()),
            &Validation::default(),
        )?;
        Ok(token_data.claims)
    }
}