use rbatis::rbatis::Rbatis;
use rbdc_pg::driver::PgDriver;
use salvo::prelude::*;
use once_cell::sync::OnceCell;

use crate::core::config::PostgresConfig;

// 全局RBatis实例
pub static RB: OnceCell<Rbatis> = OnceCell::new();

/// 获取RBatis实例
pub fn rb() -> &'static Rbatis {
    RB.get().expect("RBatis not initialized")
}

/// 创建RBatis中间件
pub fn stage() -> impl Handler {
    |_req: &mut Request, _depot: &mut Depot, _res: &mut Response, _ctrl: &mut FlowCtrl| async move {
        // 如果RBatis已经初始化，则直接返回
        if RB.get().is_some() {
            return;
        }
        
        // 获取PostgreSQL配置
        let pg_config = match PostgresConfig::get() {
            Ok(config) => config,
            Err(e) => {
                tracing::error!("Failed to get PostgreSQL config: {}", e);
                return;
            }
        };
        
        // 创建RBatis实例
        let rb = Rbatis::new();
        
        // 连接数据库
        match rb.init(PgDriver {}, &pg_config.url).await {
            Ok(_) => {
                // 设置全局RBatis实例
                if let Err(e) = RB.set(rb) {
                    tracing::error!("Failed to set global RBatis instance: {:?}", e);
                }
            },
            Err(e) => {
                tracing::error!("Failed to initialize RBatis: {}", e);
            }
        }
    }
}

/// 插入并返回ID的插件
#[macro_export]
macro_rules! insert_return_id {
    ($rb:expr, $table:expr, $entity:expr) => {
        {
            let sql = format!("insert into {} {} returning id", $table, $entity.to_sql());
            let id: Option<i64> = $rb.query_decode(&sql, vec![]).await?;
            id
        }
    };
}